---
description: 
globs: 
alwaysApply: true
---
# Generative API Router Development Guide

This guide provides instructions and tips for developing, testing, and maintaining the Generative API Router project.

## Project Structure

### Core Application Code
- **`cmd/server/main.go`**: Main application entry point. Initializes and starts the HTTP server. ([cmd/server/main.go](mdc:generative-api-router/cmd/server/main.go))
- **`internal/app/app.go`**: Centralizes application configuration and dependencies (reduced to 64 lines after Phase 2 refactoring). ([internal/app/app.go](mdc:generative-api-router/internal/app/app.go))
- **`internal/proxy/proxy.go`**: Handles incoming requests, orchestrates vendor selection, request modification, and API communication. ([internal/proxy/proxy.go](mdc:generative-api-router/internal/proxy/proxy.go))
- **`internal/proxy/client.go`**: Manages communication with downstream vendor APIs. ([internal/proxy/client.go](mdc:generative-api-router/internal/proxy/client.go))
- **`internal/proxy/response_processor.go`**: Processes non-streaming responses from vendors. ([internal/proxy/response_processor.go](mdc:generative-api-router/internal/proxy/response_processor.go))
- **`internal/proxy/stream_processor.go`**: Handles streaming responses from vendors. ([internal/proxy/stream_processor.go](mdc:generative-api-router/internal/proxy/stream_processor.go))
- **`internal/selector/selector.go`**: Implements strategies for selecting vendors and models. ([internal/selector/selector.go](mdc:generative-api-router/internal/selector/selector.go))
- **`internal/validator/validator.go`**: Handles validation of incoming requests. It also extracts the original model name from the request. ([internal/validator/validator.go](mdc:generative-api-router/internal/validator/validator.go))
- **`internal/config/config.go`**: Loads and manages configuration from JSON files. ([internal/config/config.go](mdc:generative-api-router/internal/config/config.go))
- **`internal/config/validation.go`**: Validates credentials and model configurations. ([internal/config/validation.go](mdc:generative-api-router/internal/config/validation.go))
- **`internal/handlers/api_handlers.go`**: HTTP handlers for health, chat completions, and models endpoints. ([internal/handlers/api_handlers.go](mdc:generative-api-router/internal/handlers/api_handlers.go))
- **`internal/errors/errors.go`**: Standardized error types and JSON error responses. ([internal/errors/errors.go](mdc:generative-api-router/internal/errors/errors.go))
- **`internal/filter/utils.go`**: Utility functions for filtering credentials and models by vendor. ([internal/filter/utils.go](mdc:generative-api-router/internal/filter/utils.go))
- **`internal/monitoring/metrics.go`**: Metrics collection, middleware, and monitoring endpoints. ([internal/monitoring/metrics.go](mdc:generative-api-router/internal/monitoring/metrics.go))
- **`internal/router/routes.go`**: Centralized route setup with middleware integration. ([internal/router/routes.go](mdc:generative-api-router/internal/router/routes.go))

### Configuration Files
- **`configs/credentials.json`**: Stores API keys for different vendors (gitignored). ([configs/credentials.json.example](mdc:generative-api-router/configs/credentials.json.example))
- **`configs/models.json`**: Defines the available models and their vendors. ([configs/models.json](mdc:generative-api-router/configs/models.json))

### Deployment Files
- **`deployments/docker/Dockerfile`**: For building the Docker image. ([deployments/docker/Dockerfile](mdc:generative-api-router/deployments/docker/Dockerfile))
- **`deployments/docker/docker-compose.yml`**: For running the service with Docker Compose. ([deployments/docker/docker-compose.yml](mdc:generative-api-router/deployments/docker/docker-compose.yml))

### Development Tools
- **`Makefile`**: Build automation and common tasks. ([Makefile](mdc:generative-api-router/Makefile))
- **`scripts/`**: Helper scripts for deployment, testing, and setup
- **`examples/`**: Usage examples for cURL and various client languages
- **`docs/`**: Comprehensive documentation (API, development, user guides)

## Development

1.  **Initial Setup**:
    ```bash
    # Clone and setup the project
    git clone <repository-url>
    cd generative-api-router
    make setup
    ```

2.  **Configuration**:
    *   Edit `configs/credentials.json` with valid API keys (created from example during setup)
    *   Modify `configs/models.json` to define your desired vendor/model pool

3.  **Building**:
    ```bash
    # Build the application
    make build
    
    # Output will be in build/server
    ```

4.  **Running Locally**:
    ```bash
    # Build and run
    make run
    
    # Run without building (development mode)
    make run-dev
    
    # Run with logging
    make run-with-logs
    ```

## Testing

**Key Principle**: This service acts as a *transparent proxy* with a key modification. The router selects an actual vendor/model based on its internal logic (e.g., random selection, vendor filter). The `model` field in the request to the downstream vendor is overridden with this *actual selected model*. However, the `model` field in the final response back to the client is modified to reflect the *original model name the client sent in its initial request*. All other request and response data (headers, body structure excluding the model field, status code) from the vendor **must** be passed *exactly* to the client, and vice-versa. Changes must not interfere with this.

### Running Tests

The project includes comprehensive test coverage for all packages:

```bash
# Run all tests
go test ./...

# Run tests with verbose output
go test -v ./...

# Run tests for a specific package
go test ./internal/handlers
```

Test files are available for:
- `internal/app/app_test.go` - Application initialization tests
- `internal/config/validation_test.go` - Configuration validation tests
- `internal/errors/errors_test.go` - Error handling tests
- `internal/filter/utils_test.go` - Filter utility tests
- `internal/handlers/api_handlers_test.go` - HTTP handler tests
- `internal/monitoring/metrics_test.go` - Metrics collection tests

### Manual Testing

1.  **Prerequisites for Testing**:
    *   **Kill Existing Processes**: Before starting a new server instance for testing, ensure no other instance is running on the same port (typically `:8082`).
        *   Use `sudo lsof -i :8082 | cat` to check for processes.
        *   Use `sudo kill -9 <PID>` to terminate any conflicting process (use with caution).
        *   A safer way to stop the local server if run as `./build/server &` is `pgrep -f "server$" | xargs kill -9`.
        *   If a Docker container is using the port, use `docker ps | grep 8082 | cat` to find it and `docker stop <container_id_or_name> | cat` to stop it.
    *   **Wait for Server Initialization**: After starting the server, *wait a few seconds* (e.g., `sleep 3`) before sending requests. This is crucial to avoid "Connection refused" errors.
2.  **Health Check**:
    ```bash
    curl -X GET http://localhost:8082/health | cat
    ```
3.  **Basic Chat Completion (Verify Model Reflection)**:
    ```bash
    curl -X POST http://localhost:8082/v1/chat/completions -H "Content-Type: application/json" -d '{\"model\": \"my-test-model\", \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}]}' | jq | cat
    ```
    *   Verify the `model` field in the response is `"my-test-model"`.
    *   Check server logs for `VERBOSE_DEBUG: ProxyRequest - Original requested model: 'my-test-model', will route to: 'some-actual-model'` and `Processing response from actual model: some-actual-model ... will be presented as: my-test-model`.
4.  **Tool Calling Test**:
    ```bash
    curl -X POST http://localhost:8082/v1/chat/completions -H "Content-Type: application/json" -d '{\"model\":\"any-model\",\"messages\":[{\"role\":\"user\",\"content\":\"What is the weather in Boston?\"}],\"tools\":[{\"type\":\"function\",\"function\":{\"name\":\"get_current_weather\",\"description\":\"Get current weather\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"City name\"}},\"required\":[\"location\"]}}}],\"tool_choice\":\"auto\"}' | cat
    ```
    *   Verify the response includes a valid `tool_calls` section and the `model` field reflects what was sent.
5.  **Error Handling Tests**:
    *   **Invalid Request (Missing Messages)**:
        ```bash
        curl -X POST http://localhost:8082/v1/chat/completions -H "Content-Type: application/json" -d '{\"model\":\"any-model\"}' | cat
        ```
        *   Expected: Error message about missing `messages` field, HTTP 400.

## Maintenance

*   **Dependencies**: Run `go mod tidy` periodically to clean up dependencies. Key dependencies include:
    *   `github.com/stretchr/testify` v1.10.0 - Testing assertions
    *   `github.com/go-playground/validator/v10` v10.26.0 - Struct validation
*   **Configuration Updates**: API keys (`configs/credentials.json`) and model lists (`configs/models.json`) can be updated without code changes. Restart the server for changes to take effect.
*   **Logging**: Review logs in the `logs/` directory or console output. The server logs selected vendors/models for each request, the original requested model, and how the response model is being presented. Key log lines for debugging model handling include `VERBOSE_DEBUG: ProxyRequest - Original requested model:`, `VERBOSE_DEBUG: ProxyRequest - Selected Vendor:`, and `Processing response from actual model: ... will be presented as:`.
*   **Monitoring**: Access metrics at `/metrics` endpoint for request counts, durations, and error rates. The service also includes pprof endpoints for profiling.
*   **Code Quality**: 
    ```bash
    # Format code
    make format
    
    # Run linter
    make lint
    
    # Clean build artifacts and logs
    make clean
    make clean-logs
    ```

## Common Pitfalls & Lessons Learned

*   **Port Conflicts**: Always ensure port `:8082` (or the configured port) is free before starting the server. Use `sudo lsof -i :<port> | cat` and `sudo kill -9 <PID>`. For the local server, prefer `pgrep -f "^./server$" | xargs kill -9`.
*   **Server Startup Time**: *Always* add a short delay (e.g., `sleep 3`) after starting the server in the background before sending test `curl` requests. This prevents premature "Connection refused" errors.
*   **Curl Command Formatting**: Ensure JSON payloads in `curl -d` arguments are properly quoted and escaped, especially when using multi-line JSON. Single-line JSON with escaped quotes (e.g., `\'{\"key\": \"value\"}\'`) is often safer in scripts.
*   **Background Processes**: When starting the server with `&`, ensure it's managed correctly (e.g., `pgrep -f "^./server$" | xargs kill -9` to stop it specifically).
*   **Error Message Reliance**: Avoid relying on exact string matching for error messages. Use typed errors (`errors.Is()`) for more robust error handling.

---

Important: you can't read the `configs/credentials.json` using `read_file` tool, you can use `run_terminal_cmd` to `cat configs/credentials.json` instead