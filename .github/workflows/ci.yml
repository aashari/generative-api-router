name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Verify go.mod and go.sum are up to date
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum
        
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "The following files are not properly formatted:"
          echo "$unformatted"
          echo "Please run 'make format' to fix formatting issues."
          exit 1
        fi
        echo "‚úÖ All files are properly formatted"
        
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
    - name: Run linter
      run: |
        echo "Running linter..."
        golangci-lint run --timeout=5m
        echo "‚úÖ Linting passed"
        
    - name: Run tests
      run: |
        echo "Running tests..."
        go test -v -race -coverprofile=coverage.out ./...
        echo "‚úÖ All tests passed"
        
    - name: Generate coverage report
      run: |
        echo "Generating coverage report..."
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out | tail -n 1
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
          
    - name: Check test coverage
      run: |
        echo "Checking test coverage..."
        coverage=$(go tool cover -func=coverage.out | tail -n 1 | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${coverage}%"
        # Set minimum coverage threshold (adjust as needed)
        min_coverage=70
        if (( $(echo "$coverage < $min_coverage" | bc -l) )); then
          echo "‚ùå Coverage ${coverage}% is below minimum threshold of ${min_coverage}%"
          exit 1
        fi
        echo "‚úÖ Coverage ${coverage}% meets minimum threshold of ${min_coverage}%"
        
    - name: Build application
      run: |
        echo "Building application..."
        make build
        echo "‚úÖ Build successful"
        
    - name: Verify binary
      run: |
        echo "Verifying binary..."
        if [ ! -f "build/server" ]; then
          echo "‚ùå Binary not found at build/server"
          exit 1
        fi
        file build/server
        echo "‚úÖ Binary verification passed"
        
    - name: Install gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
    - name: Run gosec security scanner
      run: |
        echo "Running security scan..."
        gosec -fmt sarif -out gosec-report.sarif ./... || true
        gosec ./...
        echo "‚úÖ Security scan completed"
        
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -f deployments/docker/Dockerfile -t generative-api-router:test .
        echo "‚úÖ Docker build successful"
        
    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        # Run container in background
        docker run -d --name test-container -p 8082:8082 generative-api-router:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        if curl -f http://localhost:8082/health; then
          echo "‚úÖ Docker container health check passed"
        else
          echo "‚ùå Docker container health check failed"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
        
    - name: Build application
      run: make build
      
    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        make setup
        # Create minimal test credentials
        cat > configs/credentials.json << 'EOF'
        [
          {
            "platform": "openai",
            "type": "api-key",
            "value": "sk-test-key-for-ci"
          }
        ]
        EOF
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Start server in background
        ./build/server > logs/ci-test.log 2>&1 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test health endpoint
        if curl -f http://localhost:8082/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          cat logs/ci-test.log
          kill $SERVER_PID
          exit 1
        fi
        
        # Test models endpoint
        if curl -f http://localhost:8082/v1/models; then
          echo "‚úÖ Models endpoint test passed"
        else
          echo "‚ùå Models endpoint test failed"
          cat logs/ci-test.log
          kill $SERVER_PID
          exit 1
        fi
        
        # Cleanup
        kill $SERVER_PID
        echo "‚úÖ Integration tests passed"
        
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check deployment readiness
      run: |
        echo "üöÄ All checks passed! Deployment ready."
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Tests passed with adequate coverage"
        echo "‚úÖ Docker build successful"
        echo "‚úÖ Integration tests passed"
        echo "‚úÖ Security scan completed"
        
    - name: Create deployment artifact
      run: |
        echo "Creating deployment artifact..."
        tar -czf deployment-artifact.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='coverage.*' \
          .
          
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifact
        path: deployment-artifact.tar.gz
        retention-days: 30 